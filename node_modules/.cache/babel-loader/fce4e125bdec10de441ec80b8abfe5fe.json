{"ast":null,"code":"import { actions as actionsType } from \"./actions\"; // The initial state of our store when the app loads.\n// Usually you would fetch this from a server\n\nconst defaultTasks = [{\n  id: '1',\n  title: 'Something',\n  state: actionsType.TASK_INBOX\n}, {\n  id: '2',\n  title: 'Something more',\n  state: actionsType.TASK_INBOX\n}, {\n  id: '3',\n  title: 'Something else',\n  state: actionsType.TASK_INBOX\n}, {\n  id: '4',\n  title: 'Something again',\n  state: actionsType.TASK_INBOX\n}]; // All our reducers simply change the state of a single task.\n\nconst taskStateReducer = taskState => {\n  return (state, action) => {\n    console.log(taskState, state, action);\n    return { ...state,\n      tasks: state.tasks.map(task => task.id === action.payload ? { ...task,\n        state: taskState\n      } : task)\n    };\n  };\n}; // The reducer describes how the contents of the store change for each action\n\n\nexport const taskReducer = (state = {\n  tasks: [...defaultTasks]\n}, action) => {\n  switch (action.type) {\n    case actionsType.TASK_ARCHIVED:\n      return taskStateReducer(actionsType.TASK_ARCHIVED)(state, action);\n\n    case actionsType.PIN_TASK:\n      return taskStateReducer(actionsType.TASK_PINNED)(state, action);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/trainingekoura/Projects/js_reactjs/storybook/src/lib/reducer.js"],"names":["actions","actionsType","defaultTasks","id","title","state","TASK_INBOX","taskStateReducer","taskState","action","console","log","tasks","map","task","payload","taskReducer","type","TASK_ARCHIVED","PIN_TASK","TASK_PINNED"],"mappings":"AAAA,SAASA,OAAO,IAAIC,WAApB,QAAsC,WAAtC,C,CACA;AACA;;AACA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,WAAlB;AAA+BC,EAAAA,KAAK,EAAEJ,WAAW,CAACK;AAAlD,CADmB,EAEnB;AAAEH,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,gBAAlB;AAAoCC,EAAAA,KAAK,EAAEJ,WAAW,CAACK;AAAvD,CAFmB,EAGnB;AAAEH,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,gBAAlB;AAAoCC,EAAAA,KAAK,EAAEJ,WAAW,CAACK;AAAvD,CAHmB,EAInB;AAAEH,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,iBAAlB;AAAqCC,EAAAA,KAAK,EAAEJ,WAAW,CAACK;AAAxD,CAJmB,CAArB,C,CAOA;;AACA,MAAMC,gBAAgB,GAAIC,SAAD,IAAe;AACpC,SAAO,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAAuBH,KAAvB,EAA8BI,MAA9B;AACA,WAAO,EACH,GAAGJ,KADA;AAEHO,MAAAA,KAAK,EAAEP,KAAK,CAACO,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IAC3BA,IAAI,CAACX,EAAL,KAAYM,MAAM,CAACM,OAAnB,GAA6B,EAAE,GAAGD,IAAL;AAAWT,QAAAA,KAAK,EAAEG;AAAlB,OAA7B,GAA6DM,IADtD;AAFJ,KAAP;AAMH,GARD;AASD,CAVH,C,CAYA;;;AACA,OAAO,MAAME,WAAW,GAAG,CAACX,KAAK,GAAG;AAACO,EAAAA,KAAK,EAAG,CAAC,GAAGV,YAAJ;AAAT,CAAT,EAAsCO,MAAtC,KAAiD;AACxE,UAAQA,MAAM,CAACQ,IAAf;AACE,SAAKhB,WAAW,CAACiB,aAAjB;AACE,aAAOX,gBAAgB,CAACN,WAAW,CAACiB,aAAb,CAAhB,CAA4Cb,KAA5C,EAAmDI,MAAnD,CAAP;;AACF,SAAKR,WAAW,CAACkB,QAAjB;AACE,aAAOZ,gBAAgB,CAACN,WAAW,CAACmB,WAAb,CAAhB,CAA0Cf,KAA1C,EAAiDI,MAAjD,CAAP;;AACF;AACE,aAAOJ,KAAP;AANJ;AAQH,CATM","sourcesContent":["import { actions as actionsType} from \"./actions\";\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: actionsType.TASK_INBOX },\n  { id: '2', title: 'Something more', state: actionsType.TASK_INBOX },\n  { id: '3', title: 'Something else', state: actionsType.TASK_INBOX },\n  { id: '4', title: 'Something again', state: actionsType.TASK_INBOX },\n];\n\n// All our reducers simply change the state of a single task.\nconst taskStateReducer = (taskState) => {\n    return (state, action) => {\n        console.log(taskState, state, action)\n        return {\n            ...state,\n            tasks: state.tasks.map(task =>\n            task.id === action.payload ? { ...task, state: taskState } : task\n            ),\n        };\n    };\n  }\n  \n// The reducer describes how the contents of the store change for each action\nexport const taskReducer = (state = {tasks : [...defaultTasks]}, action) => {\n    switch (action.type) {\n      case actionsType.TASK_ARCHIVED:\n        return taskStateReducer(actionsType.TASK_ARCHIVED)(state, action);\n      case actionsType.PIN_TASK:\n        return taskStateReducer(actionsType.TASK_PINNED)(state, action);\n      default:\n        return state;\n    }\n};\n  "]},"metadata":{},"sourceType":"module"}