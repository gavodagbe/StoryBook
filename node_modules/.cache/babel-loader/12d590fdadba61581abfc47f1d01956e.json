{"ast":null,"code":"import _objectSpread from\"/Users/trainingekoura/Projects/js_reactjs/storybook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{actions as actionsType}from\"./actions\";// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nvar defaultTasks=[{id:'1',title:'Something',state:actionsType.TASK_ARCHIVED},{id:'2',title:'Something more',state:actionsType.TASK_INBOX},{id:'3',title:'Something else',state:actionsType.TASK_INBOX},{id:'4',title:'Something again',state:actionsType.TASK_INBOX}];// All our reducers simply change the state of a single task.\nvar taskStateReducer=function taskStateReducer(taskState){return function(state,action){return _objectSpread(_objectSpread({},state),{},{tasks:state.tasks.map(function(task){return task.id===action.payload?_objectSpread(_objectSpread({},task),{},{state:taskState}):task;})});};};// The reducer describes how the contents of the store change for each action\nexport var taskReducer=function taskReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{tasks:[].concat(defaultTasks)};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case actionsType.TASK_ARCHIVED:return taskStateReducer(actionsType.TASK_ARCHIVED)(state,action);case actionsType.TASK_PINNED:console.log(actionsType.TASK_PINNED,state,action);return taskStateReducer(actionsType.TASK_PINNED)(state,action);default:return state;}};","map":{"version":3,"sources":["/Users/trainingekoura/Projects/js_reactjs/storybook/src/lib/reducer.js"],"names":["actions","actionsType","defaultTasks","id","title","state","TASK_ARCHIVED","TASK_INBOX","taskStateReducer","taskState","action","tasks","map","task","payload","taskReducer","type","TASK_PINNED","console","log"],"mappings":"yKAAA,OAASA,OAAO,GAAIC,CAAAA,WAApB,KAAsC,WAAtC,CACA;AACA;AACA,GAAMC,CAAAA,YAAY,CAAG,CACnB,CAAEC,EAAE,CAAE,GAAN,CAAWC,KAAK,CAAE,WAAlB,CAA+BC,KAAK,CAAEJ,WAAW,CAACK,aAAlD,CADmB,CAEnB,CAAEH,EAAE,CAAE,GAAN,CAAWC,KAAK,CAAE,gBAAlB,CAAoCC,KAAK,CAAEJ,WAAW,CAACM,UAAvD,CAFmB,CAGnB,CAAEJ,EAAE,CAAE,GAAN,CAAWC,KAAK,CAAE,gBAAlB,CAAoCC,KAAK,CAAEJ,WAAW,CAACM,UAAvD,CAHmB,CAInB,CAAEJ,EAAE,CAAE,GAAN,CAAWC,KAAK,CAAE,iBAAlB,CAAqCC,KAAK,CAAEJ,WAAW,CAACM,UAAxD,CAJmB,CAArB,CAOA;AACA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,SAAD,CAAe,CACpC,MAAO,UAACJ,KAAD,CAAQK,MAAR,CAAmB,CACtB,sCACOL,KADP,MAEIM,KAAK,CAAEN,KAAK,CAACM,KAAN,CAAYC,GAAZ,CAAgB,SAAAC,IAAI,QAC3BA,CAAAA,IAAI,CAACV,EAAL,GAAYO,MAAM,CAACI,OAAnB,gCAAkCD,IAAlC,MAAwCR,KAAK,CAAEI,SAA/C,GAA6DI,IADlC,EAApB,CAFX,GAMH,CAPD,CAQD,CATH,CAWA;AACA,MAAO,IAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAiD,IAAhDV,CAAAA,KAAgD,2DAAxC,CAACM,KAAK,WAAOT,YAAP,CAAN,CAAwC,IAAXQ,CAAAA,MAAW,2CACxE,OAAQA,MAAM,CAACM,IAAf,EACE,IAAKf,CAAAA,WAAW,CAACK,aAAjB,CAEE,MAAOE,CAAAA,gBAAgB,CAACP,WAAW,CAACK,aAAb,CAAhB,CAA4CD,KAA5C,CAAmDK,MAAnD,CAAP,CACF,IAAKT,CAAAA,WAAW,CAACgB,WAAjB,CACEC,OAAO,CAACC,GAAR,CAAYlB,WAAW,CAACgB,WAAxB,CAAqCZ,KAArC,CAA4CK,MAA5C,EACA,MAAOF,CAAAA,gBAAgB,CAACP,WAAW,CAACgB,WAAb,CAAhB,CAA0CZ,KAA1C,CAAiDK,MAAjD,CAAP,CACF,QACE,MAAOL,CAAAA,KAAP,CARJ,CAUH,CAXM","sourcesContent":["import { actions as actionsType} from \"./actions\";\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: actionsType.TASK_ARCHIVED },\n  { id: '2', title: 'Something more', state: actionsType.TASK_INBOX },\n  { id: '3', title: 'Something else', state: actionsType.TASK_INBOX },\n  { id: '4', title: 'Something again', state: actionsType.TASK_INBOX },\n];\n\n// All our reducers simply change the state of a single task.\nconst taskStateReducer = (taskState) => {\n    return (state, action) => {\n        return {\n            ...state,\n            tasks: state.tasks.map(task =>\n            task.id === action.payload ? { ...task, state: taskState } : task\n            ),\n        };\n    };\n  }\n  \n// The reducer describes how the contents of the store change for each action\nexport const taskReducer = (state = {tasks : [...defaultTasks]}, action) => {\n    switch (action.type) {\n      case actionsType.TASK_ARCHIVED:\n       \n        return taskStateReducer(actionsType.TASK_ARCHIVED)(state, action);\n      case actionsType.TASK_PINNED:\n        console.log(actionsType.TASK_PINNED, state, action)\n        return taskStateReducer(actionsType.TASK_PINNED)(state, action);\n      default:\n        return state;\n    }\n};\n  "]},"metadata":{},"sourceType":"module"}