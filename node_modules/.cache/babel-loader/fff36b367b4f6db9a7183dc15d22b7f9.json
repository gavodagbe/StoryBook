{"ast":null,"code":"var _jsxFileName = \"/Users/trainingekoura/Projects/js_reactjs/storybook/src/components/Task/Task.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { actions as actionsType } from '../../lib/actions';\n\nconst Task = ({\n  task: {\n    id,\n    title,\n    state\n  },\n  onArchiveTask,\n  onPinTask\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: `list-item ${state}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"label\", {\n  className: \"checkbox\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"checkbox\",\n  defaultChecked: state === actionsType.TASK_ARCHIVED,\n  disabled: true,\n  name: \"checked\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 13\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  className: \"checkbox-custom\",\n  onClick: () => onArchiveTask(id),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 13\n  }\n})), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"title\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", {\n  type: \"text\",\n  value: title || state,\n  readOnly: true,\n  placeholder: \"Input title\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 13\n  }\n})), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"actions\",\n  onClick: event => event.stopPropagation(),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }\n}, state != actionsType.TASK_ARCHIVED && /*#__PURE__*/React.createElement(\"a\", {\n  onClick: () => onPinTask(id),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: `icon-star`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 21\n  }\n}))));\n\nTask.propTypes = {\n  /** Composition of the task */\n  task: PropTypes.shape({\n    /** Id of the task */\n    id: PropTypes.string.isRequired,\n\n    /** Title of the task */\n    title: PropTypes.string.isRequired,\n\n    /** Current state of the task */\n    state: PropTypes.string.isRequired\n  }),\n\n  /** Event to change the task to archived */\n  onArchiveTask: PropTypes.func,\n\n  /** Event to change the task to pinned */\n  onPinTask: PropTypes.func\n};\nTask.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Task\",\n  \"props\": {\n    \"task\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"id\": {\n            \"name\": \"string\",\n            \"description\": \"Id of the task\",\n            \"required\": true\n          },\n          \"title\": {\n            \"name\": \"string\",\n            \"description\": \"Title of the task\",\n            \"required\": true\n          },\n          \"state\": {\n            \"name\": \"string\",\n            \"description\": \"Current state of the task\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"Composition of the task\"\n    },\n    \"onArchiveTask\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Event to change the task to archived\"\n    },\n    \"onPinTask\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"Event to change the task to pinned\"\n    }\n  }\n};\nexport default Task;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/Task/Task.js\"] = {\n    name: \"Task\",\n    docgenInfo: Task.__docgenInfo,\n    path: \"src/components/Task/Task.js\"\n  };\n}","map":{"version":3,"sources":["/Users/trainingekoura/Projects/js_reactjs/storybook/src/components/Task/Task.js"],"names":["React","PropTypes","actions","actionsType","Task","task","id","title","state","onArchiveTask","onPinTask","TASK_ARCHIVED","event","stopPropagation","propTypes","shape","string","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAO,IAAIC,WAAnB,QAAqC,mBAArC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,IAAI,EAAG;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA;AAAb,GAAR;AAA6BC,EAAAA,aAA7B;AAA4CC,EAAAA;AAA5C,CAAD,kBAET;AAAK,EAAA,SAAS,EAAG,aAAYF,KAAM,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI;AAAO,EAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI;AACI,EAAA,IAAI,EAAC,UADT;AAEI,EAAA,cAAc,EAAEA,KAAK,KAAKL,WAAW,CAACQ,aAF1C;AAGI,EAAA,QAAQ,EAAE,IAHd;AAII,EAAA,IAAI,EAAC,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,eAMI;AAAM,EAAA,SAAS,EAAC,iBAAhB;AAAkC,EAAA,OAAO,EAAE,MAAKF,aAAa,CAACH,EAAD,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EANJ,CADJ,eASI;AAAK,EAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI;AACI,EAAA,IAAI,EAAC,MADT;AAEI,EAAA,KAAK,EAAEC,KAAK,IAAIC,KAFpB;AAGI,EAAA,QAAQ,EAAE,IAHd;AAII,EAAA,WAAW,EAAC,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CATJ,eAgBI;AAAK,EAAA,SAAS,EAAC,SAAf;AAAyB,EAAA,OAAO,EAAEI,KAAK,IAAIA,KAAK,CAACC,eAAN,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEQL,KAAK,IAAIL,WAAW,CAACQ,aAArB,iBACA;AAAG,EAAA,OAAO,EAAE,MAAMD,SAAS,CAACJ,EAAD,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI;AAAM,EAAA,SAAS,EAAG,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CAHR,CAhBJ,CAFJ;;AA+BAF,IAAI,CAACU,SAAL,GAAiB;AACb;AACAT,EAAAA,IAAI,EAAEJ,SAAS,CAACc,KAAV,CAAgB;AACpB;AACAT,IAAAA,EAAE,EAAEL,SAAS,CAACe,MAAV,CAAiBC,UAFD;;AAGpB;AACAV,IAAAA,KAAK,EAAEN,SAAS,CAACe,MAAV,CAAiBC,UAJJ;;AAKpB;AACAT,IAAAA,KAAK,EAAEP,SAAS,CAACe,MAAV,CAAiBC;AANJ,GAAhB,CAFO;;AAUb;AACAR,EAAAA,aAAa,EAAER,SAAS,CAACiB,IAXZ;;AAYb;AACAR,EAAAA,SAAS,EAAET,SAAS,CAACiB;AAbR,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,eAAed,IAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {actions as actionsType} from '../../lib/actions'\n\nconst Task = ({task : { id, title, state}, onArchiveTask, onPinTask}) => \n(\n    <div className={`list-item ${state}`}>\n        <label className=\"checkbox\">\n            <input \n                type=\"checkbox\"\n                defaultChecked={state === actionsType.TASK_ARCHIVED}\n                disabled={true}\n                name=\"checked\" />\n            <span className='checkbox-custom' onClick={()=> onArchiveTask(id)} />\n        </label>\n        <div className='title' >\n            <input \n                type=\"text\" \n                value={title || state} \n                readOnly={true} \n                placeholder=\"Input title\" />\n        </div>\n        <div className=\"actions\" onClick={event => event.stopPropagation()}>\n            {\n                state != actionsType.TASK_ARCHIVED &&\n                <a onClick={() => onPinTask(id)}>\n                    <span className={`icon-star`} />\n                </a>\n            }\n        </div>\n        \n    </div>\n\n)\n\nTask.propTypes = {\n    /** Composition of the task */\n    task: PropTypes.shape({\n      /** Id of the task */\n      id: PropTypes.string.isRequired,\n      /** Title of the task */\n      title: PropTypes.string.isRequired,\n      /** Current state of the task */\n      state: PropTypes.string.isRequired,\n    }),\n    /** Event to change the task to archived */\n    onArchiveTask: PropTypes.func,\n    /** Event to change the task to pinned */\n    onPinTask: PropTypes.func,\n};\n\nexport default Task\n"]},"metadata":{},"sourceType":"module"}