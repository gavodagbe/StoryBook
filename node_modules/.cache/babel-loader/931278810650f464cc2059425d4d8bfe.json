{"ast":null,"code":"var _jsxFileName = \"/Users/trainingekoura/Projects/js_reactjs/storybook/src/components/TaskList/TaskList.js\";\nimport React, { version } from 'react';\nimport Task from \"../Task/Task\";\nimport PropTypes from 'prop-types';\nimport { actions as actionsType, archiveTask, pinTask } from '../../lib/actions';\nimport { connect } from 'react-redux';\n\nconst TaskList = ({\n  loading,\n  tasks,\n  onPinTask,\n  onArchiveTask\n}) => {\n  const events = {\n    onPinTask,\n    onArchiveTask\n  };\n  const LoadingRow = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glow-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glow-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, \"Loading\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 34\n    }\n  }, \"cool\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 52\n    }\n  }, \"state\")));\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow);\n  } //store.subscribe(data => console.log(store.getState()))\n  //tasks = store.getState()\n\n\n  if (tasks.length === 0) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icon-check\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"You have no tasks\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subtitle-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \"Sit back and relax\"))); // Sort data by TASK_PINNED on top\n\n  const tasksInOrder = [...tasks.filter(t => t.state === 'TASK_PINNED'), ...tasks.filter(t => t.state !== 'TASK_PINNED')]; //const tasksInOrder = tasks.sort((a, b) => a.state > b.state ? -1 : 1 )\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, tasksInOrder.map(task => /*#__PURE__*/React.createElement(Task, Object.assign({\n    key: task.id,\n    task: task\n  }, events, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }))));\n};\n\nTaskList.prototypes = {\n  loading: PropTypes.bool,\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\n  onPinTask: PropTypes.func.isRequired,\n  onArchiveTask: PropTypes.func.isRequired\n};\nTaskList.defaultProps = {\n  loading: false\n};\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.tasks\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onArchiveTask: id => dispatch(archiveTask(id)),\n    onPinTask: id => dispatch(pinTask(id))\n  };\n};\n\nTaskList.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TaskList\",\n  \"props\": {\n    \"loading\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false\n    }\n  }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/TaskList/TaskList.js\"] = {\n    name: \"TaskList\",\n    docgenInfo: TaskList.__docgenInfo,\n    path: \"src/components/TaskList/TaskList.js\"\n  };\n}","map":{"version":3,"sources":["/Users/trainingekoura/Projects/js_reactjs/storybook/src/components/TaskList/TaskList.js"],"names":["React","version","Task","PropTypes","actions","actionsType","archiveTask","pinTask","connect","TaskList","loading","tasks","onPinTask","onArchiveTask","events","LoadingRow","length","tasksInOrder","filter","t","state","map","task","id","prototypes","bool","arrayOf","propTypes","isRequired","func","defaultProps","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { version } from 'react'\nimport Task from \"../Task/Task\"\nimport PropTypes from 'prop-types'\nimport {actions as actionsType , archiveTask, pinTask} from '../../lib/actions'\nimport { connect } from 'react-redux'\n\nconst TaskList = ({loading , tasks, onPinTask, onArchiveTask}) => {\n    const events = {\n        onPinTask,\n        onArchiveTask\n    }\n\n    const LoadingRow = (\n        <div className=\"loading-item\">\n          <span className=\"glow-checkbox\" />\n          <span className=\"glow-text\">\n            <span>Loading</span> <span>cool</span> <span>state</span>\n          </span>\n        </div>\n      )\n\n      if (loading) {\n        return (\n          <div className=\"list-items\">\n            {LoadingRow}\n            {LoadingRow}\n            {LoadingRow}\n            {LoadingRow}\n            {LoadingRow}\n            {LoadingRow}\n          </div>\n        );\n    }\n\n    //store.subscribe(data => console.log(store.getState()))\n    //tasks = store.getState()\n\n    if(tasks.length === 0)\n        return (\n            <div className=\"list-items\">\n                <div className=\"wrapper-message\">\n                    <span className=\"icon-check\" />\n                    <div className=\"title-message\">You have no tasks</div>\n                    <div className=\"subtitle-message\">Sit back and relax</div>\n                </div>\n            </div>\n        )\n    \n    // Sort data by TASK_PINNED on top\n    const tasksInOrder = [\n            ...tasks.filter(t => t.state === 'TASK_PINNED'),\n            ...tasks.filter(t => t.state !== 'TASK_PINNED'),\n        ];\n    \n    //const tasksInOrder = tasks.sort((a, b) => a.state > b.state ? -1 : 1 )\n    return (\n        <div className='list-items'>\n            {\n                tasksInOrder.map(task => (\n                    <Task key={task.id} task={task} {...events} />\n                ))\n            }\n        </div>\n    )\n    \n}\n\nTaskList.prototypes = {\n    loading : PropTypes.bool,\n    tasks : PropTypes.arrayOf(Task.propTypes.task).isRequired,\n    onPinTask : PropTypes.func.isRequired,\n    onArchiveTask : PropTypes.func.isRequired\n}\n\nTaskList.defaultProps = {\n    loading : false\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks : state.tasks\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onArchiveTask: id => dispatch(archiveTask(id)),\n        onPinTask: id => dispatch(pinTask(id)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList)"]},"metadata":{},"sourceType":"module"}