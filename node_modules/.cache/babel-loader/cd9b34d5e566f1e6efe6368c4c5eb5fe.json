{"ast":null,"code":"import { actions as actionsType } from \"./actions\"; // The initial state of our store when the app loads.\n// Usually you would fetch this from a server\n\nconst defaultTasks = [{\n  id: '1',\n  title: 'Something',\n  state: actionsType.TASK_INBOX\n}, {\n  id: '2',\n  title: 'Something more',\n  state: actionsType.TASK_INBOX\n}, {\n  id: '3',\n  title: 'Something else',\n  state: actionsType.TASK_INBOX\n}, {\n  id: '4',\n  title: 'Something again',\n  state: actionsType.TASK_INBOX\n}]; // All our reducers simply change the state of a single task.\n\nconst taskStateReducer = taskState => {\n  return (state, action) => {\n    return { ...state,\n      tasks: state.tasks.map(task => task.id === action.payload ? { ...task,\n        state: taskState\n      } : task)\n    };\n  };\n}; // The reducer describes how the contents of the store change for each action\n\n\nexport const taskReducer = (state = {\n  tasks: [...defaultTasks]\n}, action) => {\n  switch (action.type) {\n    case actionsType.TASK_ARCHIVED:\n      return taskStateReducer(actionsType.TASK_ARCHIVED)(state, action);\n\n    case actionsType.PIN_TASK:\n      console.log(actionsType.TASK_PINNED, state, action);\n      return taskStateReducer(actionsType.TASK_PINNED)(state, action);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/trainingekoura/Projects/js_reactjs/storybook/src/lib/reducer.js"],"names":["actions","actionsType","defaultTasks","id","title","state","TASK_INBOX","taskStateReducer","taskState","action","tasks","map","task","payload","taskReducer","type","TASK_ARCHIVED","PIN_TASK","console","log","TASK_PINNED"],"mappings":"AAAA,SAASA,OAAO,IAAIC,WAApB,QAAsC,WAAtC,C,CACA;AACA;;AACA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,WAAlB;AAA+BC,EAAAA,KAAK,EAAEJ,WAAW,CAACK;AAAlD,CADmB,EAEnB;AAAEH,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,gBAAlB;AAAoCC,EAAAA,KAAK,EAAEJ,WAAW,CAACK;AAAvD,CAFmB,EAGnB;AAAEH,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,gBAAlB;AAAoCC,EAAAA,KAAK,EAAEJ,WAAW,CAACK;AAAvD,CAHmB,EAInB;AAAEH,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,iBAAlB;AAAqCC,EAAAA,KAAK,EAAEJ,WAAW,CAACK;AAAxD,CAJmB,CAArB,C,CAOA;;AACA,MAAMC,gBAAgB,GAAIC,SAAD,IAAe;AACpC,SAAO,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACtB,WAAO,EACH,GAAGJ,KADA;AAEHK,MAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IAC3BA,IAAI,CAACT,EAAL,KAAYM,MAAM,CAACI,OAAnB,GAA6B,EAAE,GAAGD,IAAL;AAAWP,QAAAA,KAAK,EAAEG;AAAlB,OAA7B,GAA6DI,IADtD;AAFJ,KAAP;AAMH,GAPD;AAQD,CATH,C,CAWA;;;AACA,OAAO,MAAME,WAAW,GAAG,CAACT,KAAK,GAAG;AAACK,EAAAA,KAAK,EAAG,CAAC,GAAGR,YAAJ;AAAT,CAAT,EAAsCO,MAAtC,KAAiD;AACxE,UAAQA,MAAM,CAACM,IAAf;AACE,SAAKd,WAAW,CAACe,aAAjB;AAEE,aAAOT,gBAAgB,CAACN,WAAW,CAACe,aAAb,CAAhB,CAA4CX,KAA5C,EAAmDI,MAAnD,CAAP;;AACF,SAAKR,WAAW,CAACgB,QAAjB;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYlB,WAAW,CAACmB,WAAxB,EAAqCf,KAArC,EAA4CI,MAA5C;AACA,aAAOF,gBAAgB,CAACN,WAAW,CAACmB,WAAb,CAAhB,CAA0Cf,KAA1C,EAAiDI,MAAjD,CAAP;;AACF;AACE,aAAOJ,KAAP;AARJ;AAUH,CAXM","sourcesContent":["import { actions as actionsType} from \"./actions\";\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: actionsType.TASK_INBOX },\n  { id: '2', title: 'Something more', state: actionsType.TASK_INBOX },\n  { id: '3', title: 'Something else', state: actionsType.TASK_INBOX },\n  { id: '4', title: 'Something again', state: actionsType.TASK_INBOX },\n];\n\n// All our reducers simply change the state of a single task.\nconst taskStateReducer = (taskState) => {\n    return (state, action) => {\n        return {\n            ...state,\n            tasks: state.tasks.map(task =>\n            task.id === action.payload ? { ...task, state: taskState } : task\n            ),\n        };\n    };\n  }\n  \n// The reducer describes how the contents of the store change for each action\nexport const taskReducer = (state = {tasks : [...defaultTasks]}, action) => {\n    switch (action.type) {\n      case actionsType.TASK_ARCHIVED:\n       \n        return taskStateReducer(actionsType.TASK_ARCHIVED)(state, action);\n      case actionsType.PIN_TASK:\n        console.log(actionsType.TASK_PINNED, state, action)\n        return taskStateReducer(actionsType.TASK_PINNED)(state, action);\n      default:\n        return state;\n    }\n};\n  "]},"metadata":{},"sourceType":"module"}